{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AccessorPropertyComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "AccessorProperty",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "AccessorPropertyNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "AccessorProperty",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "ArrayExpression": {
            "properties": {
                "elements": {
                    "description": "an element will be `null` in the case of a sparse array: `[1, ,3]`",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ArrayExpression"
                            },
                            {
                                "$ref": "#/definitions/ArrayPattern"
                            },
                            {
                                "$ref": "#/definitions/ArrowFunctionExpression"
                            },
                            {
                                "$ref": "#/definitions/AssignmentExpression"
                            },
                            {
                                "$ref": "#/definitions/AwaitExpression"
                            },
                            {
                                "$ref": "#/definitions/BigIntLiteral"
                            },
                            {
                                "$ref": "#/definitions/BinaryExpression"
                            },
                            {
                                "$ref": "#/definitions/ObjectPattern"
                            },
                            {
                                "$ref": "#/definitions/Identifier"
                            },
                            {
                                "$ref": "#/definitions/BooleanLiteral"
                            },
                            {
                                "$ref": "#/definitions/CallExpression"
                            },
                            {
                                "$ref": "#/definitions/ChainExpression"
                            },
                            {
                                "$ref": "#/definitions/ClassExpression"
                            },
                            {
                                "$ref": "#/definitions/ConditionalExpression"
                            },
                            {
                                "$ref": "#/definitions/FunctionExpression"
                            },
                            {
                                "$ref": "#/definitions/ImportExpression"
                            },
                            {
                                "$ref": "#/definitions/JSXElement"
                            },
                            {
                                "$ref": "#/definitions/JSXFragment"
                            },
                            {
                                "$ref": "#/definitions/NullLiteral"
                            },
                            {
                                "$ref": "#/definitions/NumberLiteral"
                            },
                            {
                                "$ref": "#/definitions/RegExpLiteral"
                            },
                            {
                                "$ref": "#/definitions/StringLiteral"
                            },
                            {
                                "$ref": "#/definitions/TemplateLiteral"
                            },
                            {
                                "$ref": "#/definitions/LogicalExpression"
                            },
                            {
                                "$ref": "#/definitions/MemberExpressionComputedName"
                            },
                            {
                                "$ref": "#/definitions/MemberExpressionNonComputedName"
                            },
                            {
                                "$ref": "#/definitions/MetaProperty"
                            },
                            {
                                "$ref": "#/definitions/NewExpression"
                            },
                            {
                                "$ref": "#/definitions/ObjectExpression"
                            },
                            {
                                "$ref": "#/definitions/SequenceExpression"
                            },
                            {
                                "$ref": "#/definitions/Super"
                            },
                            {
                                "$ref": "#/definitions/TaggedTemplateExpression"
                            },
                            {
                                "$ref": "#/definitions/ThisExpression"
                            },
                            {
                                "$ref": "#/definitions/TSAsExpression"
                            },
                            {
                                "$ref": "#/definitions/TSInstantiationExpression"
                            },
                            {
                                "$ref": "#/definitions/TSNonNullExpression"
                            },
                            {
                                "$ref": "#/definitions/TSSatisfiesExpression"
                            },
                            {
                                "$ref": "#/definitions/TSTypeAssertion"
                            },
                            {
                                "$ref": "#/definitions/UnaryExpression"
                            },
                            {
                                "$ref": "#/definitions/UpdateExpression"
                            },
                            {
                                "$ref": "#/definitions/YieldExpression"
                            },
                            {
                                "$ref": "#/definitions/SpreadElement"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ArrayExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ArrayPattern": {
            "properties": {
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "elements": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ArrayPattern"
                            },
                            {
                                "$ref": "#/definitions/AssignmentPattern"
                            },
                            {
                                "$ref": "#/definitions/ObjectPattern"
                            },
                            {
                                "$ref": "#/definitions/Identifier"
                            },
                            {
                                "$ref": "#/definitions/MemberExpressionComputedName"
                            },
                            {
                                "$ref": "#/definitions/MemberExpressionNonComputedName"
                            },
                            {
                                "$ref": "#/definitions/RestElement"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ArrayPattern",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "ArrowFunctionExpression": {
            "properties": {
                "async": {
                    "type": "boolean"
                },
                "body": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BlockStatement"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        }
                    ]
                },
                "expression": {
                    "type": "boolean"
                },
                "generator": {
                    "type": "boolean"
                },
                "id": {
                    "type": "null"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "type": {
                    "const": "ArrowFunctionExpression",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "AssignmentExpression": {
            "properties": {
                "left": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "$ref": "#/definitions/ValueOf"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "AssignmentExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AssignmentPattern": {
            "properties": {
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "left": {
                    "$ref": "#/definitions/BindingName"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "AssignmentPattern",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "AwaitExpression": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "AwaitExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BigIntLiteral": {
            "properties": {
                "bigint": {
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "type": "string"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "properties": {},
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "BinaryExpression": {
            "properties": {
                "left": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/PrivateIdentifier"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "$ref": "#/definitions/ValueOf_1"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "BinaryExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BindingName": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                }
            ]
        },
        "BlockStatement": {
            "properties": {
                "body": {
                    "items": {
                        "$ref": "#/definitions/Statement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "BlockStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BooleanLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "enum": [
                        "false",
                        "true"
                    ],
                    "type": "string"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BreakStatement": {
            "properties": {
                "label": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "BreakStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CallExpression": {
            "properties": {
                "arguments": {
                    "items": {
                        "$ref": "#/definitions/CallExpressionArgument"
                    },
                    "type": "array"
                },
                "callee": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "CallExpression",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "CallExpressionArgument": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/AssignmentExpression"
                },
                {
                    "$ref": "#/definitions/AwaitExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BinaryExpression"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ChainExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/ConditionalExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/ImportExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/LogicalExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/NewExpression"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSInstantiationExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSSatisfiesExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                },
                {
                    "$ref": "#/definitions/UnaryExpression"
                },
                {
                    "$ref": "#/definitions/UpdateExpression"
                },
                {
                    "$ref": "#/definitions/YieldExpression"
                },
                {
                    "$ref": "#/definitions/SpreadElement"
                }
            ]
        },
        "CatchClause": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/BlockStatement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "param": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "CatchClause",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ChainElement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                }
            ]
        },
        "ChainExpression": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/ChainElement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ChainExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClassBody": {
            "properties": {
                "body": {
                    "items": {
                        "$ref": "#/definitions/ClassElement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ClassBody",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClassDeclarationWithName": {
            "properties": {
                "abstract": {
                    "description": "Whether the class is an abstract class.\n```\nabstract class Foo {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/ClassBody",
                    "description": "The class body."
                },
                "declare": {
                    "description": "Whether the class has been `declare`d:\n```\ndeclare class Foo {...}\n```",
                    "type": "boolean"
                },
                "decorators": {
                    "description": "The decorators declared for the class.\n```",
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The class's name.\n- For a `ClassExpression` this may be `null` if the name is omitted.\n- For a `ClassDeclaration` this may be `null` if and only if the parent is\n  an `ExportDefaultDeclaration`."
                },
                "implements": {
                    "description": "The implemented interfaces for the class.",
                    "items": {
                        "$ref": "#/definitions/TSClassImplements"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "superClass": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The super class this class extends."
                },
                "superTypeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation",
                    "description": "The generic type parameters passed to the superClass."
                },
                "superTypeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "type": {
                    "const": "ClassDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameters declared for the class."
                }
            },
            "type": "object"
        },
        "ClassDeclarationWithOptionalName": {
            "properties": {
                "abstract": {
                    "description": "Whether the class is an abstract class.\n```\nabstract class Foo {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/ClassBody",
                    "description": "The class body."
                },
                "declare": {
                    "description": "Whether the class has been `declare`d:\n```\ndeclare class Foo {...}\n```",
                    "type": "boolean"
                },
                "decorators": {
                    "description": "The decorators declared for the class.\n```",
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The class's name.\n- For a `ClassExpression` this may be `null` if the name is omitted.\n- For a `ClassDeclaration` this may be `null` if and only if the parent is\n  an `ExportDefaultDeclaration`."
                },
                "implements": {
                    "description": "The implemented interfaces for the class.",
                    "items": {
                        "$ref": "#/definitions/TSClassImplements"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "superClass": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The super class this class extends."
                },
                "superTypeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation",
                    "description": "The generic type parameters passed to the superClass."
                },
                "superTypeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "type": {
                    "const": "ClassDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameters declared for the class."
                }
            },
            "type": "object"
        },
        "ClassElement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/AccessorPropertyComputedName"
                },
                {
                    "$ref": "#/definitions/AccessorPropertyNonComputedName"
                },
                {
                    "$ref": "#/definitions/MethodDefinitionComputedName"
                },
                {
                    "$ref": "#/definitions/MethodDefinitionNonComputedName"
                },
                {
                    "$ref": "#/definitions/PropertyDefinitionComputedName"
                },
                {
                    "$ref": "#/definitions/PropertyDefinitionNonComputedName"
                },
                {
                    "$ref": "#/definitions/StaticBlock"
                },
                {
                    "$ref": "#/definitions/TSAbstractAccessorPropertyComputedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractAccessorPropertyNonComputedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractMethodDefinitionComputedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractMethodDefinitionNonComputedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractPropertyDefinitionComputedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractPropertyDefinitionNonComputedName"
                },
                {
                    "$ref": "#/definitions/TSIndexSignature"
                }
            ]
        },
        "ClassExpression": {
            "properties": {
                "abstract": {
                    "const": false,
                    "description": "Whether the class is an abstract class.\n```\nabstract class Foo {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/ClassBody",
                    "description": "The class body."
                },
                "declare": {
                    "const": false,
                    "description": "Whether the class has been `declare`d:\n```\ndeclare class Foo {...}\n```",
                    "type": "boolean"
                },
                "decorators": {
                    "description": "The decorators declared for the class.\n```",
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The class's name.\n- For a `ClassExpression` this may be `null` if the name is omitted.\n- For a `ClassDeclaration` this may be `null` if and only if the parent is\n  an `ExportDefaultDeclaration`."
                },
                "implements": {
                    "description": "The implemented interfaces for the class.",
                    "items": {
                        "$ref": "#/definitions/TSClassImplements"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "superClass": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The super class this class extends."
                },
                "superTypeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation",
                    "description": "The generic type parameters passed to the superClass."
                },
                "superTypeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "type": {
                    "const": "ClassExpression",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameters declared for the class."
                }
            },
            "type": "object"
        },
        "ClassPropertyNameNonComputed": {
            "anyOf": [
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/PrivateIdentifier"
                }
            ]
        },
        "Client": {
            "properties": {
                "operation": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Operation"
                    },
                    "type": "object"
                },
                "optional": {
                    "type": "boolean"
                },
                "properties": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    },
                    "type": "object"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "High",
                        "Modular",
                        "Rest"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConditionalExpression": {
            "properties": {
                "alternate": {
                    "$ref": "#/definitions/Expression"
                },
                "consequent": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "ConditionalExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ContinueStatement": {
            "properties": {
                "label": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ContinueStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DebuggerStatement": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "DebuggerStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Decorator": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/LeftHandSideExpression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "Decorator",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DefaultExportDeclarations": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FunctionDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/FunctionDeclarationWithOptionalName"
                },
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/AssignmentExpression"
                },
                {
                    "$ref": "#/definitions/AwaitExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BinaryExpression"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ChainExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/ConditionalExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/ImportExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/LogicalExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/NewExpression"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSInstantiationExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSSatisfiesExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                },
                {
                    "$ref": "#/definitions/UnaryExpression"
                },
                {
                    "$ref": "#/definitions/UpdateExpression"
                },
                {
                    "$ref": "#/definitions/YieldExpression"
                },
                {
                    "$ref": "#/definitions/ClassDeclarationWithOptionalName"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                },
                {
                    "$ref": "#/definitions/TSEnumDeclaration"
                },
                {
                    "$ref": "#/definitions/TSInterfaceDeclaration"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationGlobal"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationNamespace"
                },
                {
                    "$ref": "#/definitions/TSTypeAliasDeclaration"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInForOfDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInNormalContextDeclaration"
                }
            ]
        },
        "DestructuringPattern": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/AssignmentPattern"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/RestElement"
                }
            ]
        },
        "DoWhileStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "DoWhileStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EmptyStatement": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "EmptyStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityName": {
            "anyOf": [
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSQualifiedName"
                }
            ]
        },
        "ExportAllDeclaration": {
            "properties": {
                "assertions": {
                    "description": "The assertions declared for the export.\n```\nexport * from 'mod' assert { type: 'json' };\n```",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "attributes": {
                    "description": "The attributes declared for the export.\n```\nexport * from 'mod' assert { type: 'json' };\n```",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "exportKind": {
                    "$ref": "#/definitions/ExportKind",
                    "description": "The kind of the export."
                },
                "exported": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The name for the exported items. `null` if no name is assigned."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "$ref": "#/definitions/StringLiteral",
                    "description": "The source module being exported from."
                },
                "type": {
                    "const": "ExportAllDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportDefaultDeclaration": {
            "properties": {
                "declaration": {
                    "$ref": "#/definitions/DefaultExportDeclarations",
                    "description": "The declaration being exported."
                },
                "exportKind": {
                    "$ref": "#/definitions/ExportKind",
                    "description": "The kind of the export."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ExportDefaultDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportKind": {
            "enum": [
                "type",
                "value"
            ],
            "type": "string"
        },
        "ExportNamedDeclarationWithSource": {
            "properties": {
                "assertions": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "attributes": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "declaration": {
                    "description": "The exported declaration.\n```\nexport const x = 1;\n```\nThis will be `null` if `source` is not `null`, or if there are `specifiers`",
                    "type": "null"
                },
                "exportKind": {
                    "$ref": "#/definitions/ExportKind",
                    "description": "The kind of the export."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "$ref": "#/definitions/StringLiteral",
                    "description": "The source module being exported from."
                },
                "specifiers": {
                    "description": "The specifiers being exported.\n```\nexport { a, b };\n```\nThis will be an empty array if `declaration` is not `null`",
                    "items": {
                        "$ref": "#/definitions/ExportSpecifier"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "ExportNamedDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportNamedDeclarationWithoutSourceWithMultiple": {
            "properties": {
                "assertions": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "attributes": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "declaration": {
                    "description": "The exported declaration.\n```\nexport const x = 1;\n```\nThis will be `null` if `source` is not `null`, or if there are `specifiers`",
                    "type": "null"
                },
                "exportKind": {
                    "$ref": "#/definitions/ExportKind",
                    "description": "The kind of the export."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "description": "The source module being exported from.",
                    "type": "null"
                },
                "specifiers": {
                    "description": "The specifiers being exported.\n```\nexport { a, b };\n```\nThis will be an empty array if `declaration` is not `null`",
                    "items": {
                        "$ref": "#/definitions/ExportSpecifier"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "ExportNamedDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportNamedDeclarationWithoutSourceWithSingle": {
            "properties": {
                "assertions": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "attributes": {
                    "description": "This will always be an empty array.",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "declaration": {
                    "$ref": "#/definitions/NamedExportDeclarations",
                    "description": "The exported declaration.\n```\nexport const x = 1;\n```\nThis will be `null` if `source` is not `null`, or if there are `specifiers`"
                },
                "exportKind": {
                    "$ref": "#/definitions/ExportKind",
                    "description": "The kind of the export."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "description": "The source module being exported from.",
                    "type": "null"
                },
                "specifiers": {
                    "description": "The specifiers being exported.\n```\nexport { a, b };\n```\nThis will be an empty array if `declaration` is not `null`",
                    "items": {
                        "$ref": "#/definitions/ExportSpecifier"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "ExportNamedDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportSpecifier": {
            "properties": {
                "exportKind": {
                    "$ref": "#/definitions/ExportKind"
                },
                "exported": {
                    "$ref": "#/definitions/Identifier"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "local": {
                    "$ref": "#/definitions/Identifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ExportSpecifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Expression": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/AssignmentExpression"
                },
                {
                    "$ref": "#/definitions/AwaitExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BinaryExpression"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ChainExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/ConditionalExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/ImportExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/LogicalExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/NewExpression"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSInstantiationExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSSatisfiesExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                },
                {
                    "$ref": "#/definitions/UnaryExpression"
                },
                {
                    "$ref": "#/definitions/UpdateExpression"
                },
                {
                    "$ref": "#/definitions/YieldExpression"
                }
            ]
        },
        "ExpressionStatement": {
            "properties": {
                "directive": {
                    "type": "string"
                },
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ExpressionStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ForInStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "left": {
                    "$ref": "#/definitions/ForInitialiser"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "ForInStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ForInitialiser": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/AssignmentExpression"
                },
                {
                    "$ref": "#/definitions/AwaitExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BinaryExpression"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ChainExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/ConditionalExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/ImportExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/LogicalExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/NewExpression"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSInstantiationExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSSatisfiesExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                },
                {
                    "$ref": "#/definitions/UnaryExpression"
                },
                {
                    "$ref": "#/definitions/UpdateExpression"
                },
                {
                    "$ref": "#/definitions/YieldExpression"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                }
            ]
        },
        "ForOfInitialiser": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/AssignmentExpression"
                },
                {
                    "$ref": "#/definitions/AwaitExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BinaryExpression"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ChainExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/ConditionalExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/ImportExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/LogicalExpression"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/NewExpression"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSInstantiationExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSSatisfiesExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                },
                {
                    "$ref": "#/definitions/UnaryExpression"
                },
                {
                    "$ref": "#/definitions/UpdateExpression"
                },
                {
                    "$ref": "#/definitions/YieldExpression"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInForOfDeclaration"
                }
            ]
        },
        "ForOfStatement": {
            "properties": {
                "await": {
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "left": {
                    "$ref": "#/definitions/ForOfInitialiser"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "ForOfStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ForStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "init": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "type": {
                    "const": "ForStatement",
                    "type": "string"
                },
                "update": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "FunctionDeclaration": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FunctionDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/FunctionDeclarationWithOptionalName"
                }
            ]
        },
        "FunctionDeclarationWithName": {
            "properties": {
                "async": {
                    "description": "Whether the function is async:\n```\nasync function foo(...) {...}\nconst x = async function (...) {...}\nconst x = async (...) => {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/BlockStatement",
                    "description": "The body of the function.\n- For an `ArrowFunctionExpression` this may be an `Expression` or `BlockStatement`.\n- For a `FunctionDeclaration` or `FunctionExpression` this is always a `BlockStatement.\n- For a `TSDeclareFunction` this is always `undefined`.\n- For a `TSEmptyBodyFunctionExpression` this is always `null`."
                },
                "declare": {
                    "const": false,
                    "description": "This is only `true` if and only if the node is a `TSDeclareFunction` and it has `declare`:\n```\ndeclare function foo(...) {...}\n```",
                    "type": "boolean"
                },
                "expression": {
                    "const": false,
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "description": "Whether the function is a generator function:\n```\nfunction *foo(...) {...}\nconst x = function *(...) {...}\n```\nThis is always `false` for arrow functions as they cannot be generators.",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "FunctionDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "FunctionDeclarationWithOptionalName": {
            "properties": {
                "async": {
                    "description": "Whether the function is async:\n```\nasync function foo(...) {...}\nconst x = async function (...) {...}\nconst x = async (...) => {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/BlockStatement",
                    "description": "The body of the function.\n- For an `ArrowFunctionExpression` this may be an `Expression` or `BlockStatement`.\n- For a `FunctionDeclaration` or `FunctionExpression` this is always a `BlockStatement.\n- For a `TSDeclareFunction` this is always `undefined`.\n- For a `TSEmptyBodyFunctionExpression` this is always `null`."
                },
                "declare": {
                    "const": false,
                    "description": "This is only `true` if and only if the node is a `TSDeclareFunction` and it has `declare`:\n```\ndeclare function foo(...) {...}\n```",
                    "type": "boolean"
                },
                "expression": {
                    "const": false,
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "description": "Whether the function is a generator function:\n```\nfunction *foo(...) {...}\nconst x = function *(...) {...}\n```\nThis is always `false` for arrow functions as they cannot be generators.",
                    "type": "boolean"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "FunctionDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "FunctionExpression": {
            "properties": {
                "async": {
                    "description": "Whether the function is async:\n```\nasync function foo(...) {...}\nconst x = async function (...) {...}\nconst x = async (...) => {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "$ref": "#/definitions/BlockStatement",
                    "description": "The body of the function.\n- For an `ArrowFunctionExpression` this may be an `Expression` or `BlockStatement`.\n- For a `FunctionDeclaration` or `FunctionExpression` this is always a `BlockStatement.\n- For a `TSDeclareFunction` this is always `undefined`.\n- For a `TSEmptyBodyFunctionExpression` this is always `null`."
                },
                "declare": {
                    "description": "This is only `true` if and only if the node is a `TSDeclareFunction` and it has `declare`:\n```\ndeclare function foo(...) {...}\n```",
                    "type": "boolean"
                },
                "expression": {
                    "const": false,
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "description": "Whether the function is a generator function:\n```\nfunction *foo(...) {...}\nconst x = function *(...) {...}\n```\nThis is always `false` for arrow functions as they cannot be generators.",
                    "type": "boolean"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "FunctionExpression",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "Identifier": {
            "properties": {
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "Identifier",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "IfStatement": {
            "properties": {
                "alternate": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionDeclarationWithName"
                        },
                        {
                            "$ref": "#/definitions/BlockStatement"
                        },
                        {
                            "$ref": "#/definitions/BreakStatement"
                        },
                        {
                            "$ref": "#/definitions/ClassDeclarationWithName"
                        },
                        {
                            "$ref": "#/definitions/ContinueStatement"
                        },
                        {
                            "$ref": "#/definitions/DebuggerStatement"
                        },
                        {
                            "$ref": "#/definitions/ExportAllDeclaration"
                        },
                        {
                            "$ref": "#/definitions/ExportDefaultDeclaration"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithMultiple"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithSingle"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithSource"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                        },
                        {
                            "$ref": "#/definitions/TSEnumDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSImportEqualsDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSInterfaceDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationGlobal"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationNamespace"
                        },
                        {
                            "$ref": "#/definitions/TSNamespaceExportDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAliasDeclaration"
                        },
                        {
                            "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                        },
                        {
                            "$ref": "#/definitions/UsingInForOfDeclaration"
                        },
                        {
                            "$ref": "#/definitions/UsingInNormalContextDeclaration"
                        },
                        {
                            "$ref": "#/definitions/DoWhileStatement"
                        },
                        {
                            "$ref": "#/definitions/EmptyStatement"
                        },
                        {
                            "$ref": "#/definitions/ExpressionStatement"
                        },
                        {
                            "$ref": "#/definitions/ForInStatement"
                        },
                        {
                            "$ref": "#/definitions/ForOfStatement"
                        },
                        {
                            "$ref": "#/definitions/ForStatement"
                        },
                        {
                            "$ref": "#/definitions/IfStatement"
                        },
                        {
                            "$ref": "#/definitions/ImportDeclaration"
                        },
                        {
                            "$ref": "#/definitions/WhileStatement"
                        },
                        {
                            "$ref": "#/definitions/LabeledStatement"
                        },
                        {
                            "$ref": "#/definitions/ReturnStatement"
                        },
                        {
                            "$ref": "#/definitions/SwitchStatement"
                        },
                        {
                            "$ref": "#/definitions/ThrowStatement"
                        },
                        {
                            "$ref": "#/definitions/TryStatement"
                        },
                        {
                            "$ref": "#/definitions/TSExportAssignment"
                        },
                        {
                            "$ref": "#/definitions/WithStatement"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "consequent": {
                    "$ref": "#/definitions/Statement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "IfStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportAttribute": {
            "properties": {
                "key": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ImportAttribute",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/Literal"
                }
            },
            "type": "object"
        },
        "ImportClause": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ImportDefaultSpecifier"
                },
                {
                    "$ref": "#/definitions/ImportNamespaceSpecifier"
                },
                {
                    "$ref": "#/definitions/ImportSpecifier"
                }
            ]
        },
        "ImportDeclaration": {
            "properties": {
                "assertions": {
                    "description": "The assertions declared for the export.\n```\nimport * from 'mod' assert { type: 'json' };\n```",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "attributes": {
                    "description": "The attributes declared for the export.\n```\nimport * from 'mod' with { type: 'json' };\n```",
                    "items": {
                        "$ref": "#/definitions/ImportAttribute"
                    },
                    "type": "array"
                },
                "importKind": {
                    "$ref": "#/definitions/ImportKind",
                    "description": "The kind of the import."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "$ref": "#/definitions/StringLiteral",
                    "description": "The source module being imported from."
                },
                "specifiers": {
                    "description": "The specifiers being imported.\nIf this is an empty array then either there are no specifiers:\n```\nimport {} from 'mod';\n```\nOr it is a side-effect import:\n```\nimport 'mod';\n```",
                    "items": {
                        "$ref": "#/definitions/ImportClause"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "ImportDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportDefaultSpecifier": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "local": {
                    "$ref": "#/definitions/Identifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ImportDefaultSpecifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportExpression": {
            "properties": {
                "attributes": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "source": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "ImportExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportKind": {
            "enum": [
                "type",
                "value"
            ],
            "type": "string"
        },
        "ImportNamespaceSpecifier": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "local": {
                    "$ref": "#/definitions/Identifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ImportNamespaceSpecifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportSpecifier": {
            "properties": {
                "importKind": {
                    "$ref": "#/definitions/ImportKind"
                },
                "imported": {
                    "$ref": "#/definitions/Identifier"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "local": {
                    "$ref": "#/definitions/Identifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ImportSpecifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Interface": {
            "properties": {
                "#declaration": {
                    "$ref": "#/definitions/FunctionDeclaration"
                }
            },
            "type": "object"
        },
        "JSXAttribute": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/JSXIdentifier"
                        },
                        {
                            "$ref": "#/definitions/JSXNamespacedName"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXAttribute",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/JSXExpressionContainer"
                        },
                        {
                            "$ref": "#/definitions/JSXSpreadChild"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "JSXChild": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/JSXExpressionContainer"
                },
                {
                    "$ref": "#/definitions/JSXSpreadChild"
                },
                {
                    "$ref": "#/definitions/JSXText"
                }
            ]
        },
        "JSXClosingElement": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "$ref": "#/definitions/JSXTagNameExpression"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXClosingElement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXClosingFragment": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXClosingFragment",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXElement": {
            "properties": {
                "children": {
                    "items": {
                        "$ref": "#/definitions/JSXChild"
                    },
                    "type": "array"
                },
                "closingElement": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/JSXClosingElement"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "openingElement": {
                    "$ref": "#/definitions/JSXOpeningElement"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXElement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXEmptyExpression": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXEmptyExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXExpressionContainer": {
            "properties": {
                "expression": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXEmptyExpression"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXExpressionContainer",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXFragment": {
            "properties": {
                "children": {
                    "items": {
                        "$ref": "#/definitions/JSXChild"
                    },
                    "type": "array"
                },
                "closingFragment": {
                    "$ref": "#/definitions/JSXClosingFragment"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "openingFragment": {
                    "$ref": "#/definitions/JSXOpeningFragment"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXFragment",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXIdentifier": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "type": "string"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXIdentifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXMemberExpression": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "object": {
                    "$ref": "#/definitions/JSXTagNameExpression"
                },
                "property": {
                    "$ref": "#/definitions/JSXIdentifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXMemberExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXNamespacedName": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "$ref": "#/definitions/JSXIdentifier"
                },
                "namespace": {
                    "$ref": "#/definitions/JSXIdentifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXNamespacedName",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXOpeningElement": {
            "properties": {
                "attributes": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/JSXAttribute"
                            },
                            {
                                "$ref": "#/definitions/JSXSpreadAttribute"
                            }
                        ]
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "$ref": "#/definitions/JSXTagNameExpression"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "selfClosing": {
                    "type": "boolean"
                },
                "type": {
                    "const": "JSXOpeningElement",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "JSXOpeningFragment": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXOpeningFragment",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXSpreadAttribute": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXSpreadAttribute",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXSpreadChild": {
            "properties": {
                "expression": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXEmptyExpression"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "JSXSpreadChild",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JSXTagNameExpression": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSXIdentifier"
                },
                {
                    "$ref": "#/definitions/JSXMemberExpression"
                },
                {
                    "$ref": "#/definitions/JSXNamespacedName"
                }
            ]
        },
        "JSXText": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "type": "string"
                },
                "type": {
                    "const": "JSXText",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LabeledStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "label": {
                    "$ref": "#/definitions/Identifier"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "LabeledStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LeftHandSideExpression": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayExpression"
                },
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/ArrowFunctionExpression"
                },
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/CallExpression"
                },
                {
                    "$ref": "#/definitions/ClassExpression"
                },
                {
                    "$ref": "#/definitions/FunctionExpression"
                },
                {
                    "$ref": "#/definitions/JSXElement"
                },
                {
                    "$ref": "#/definitions/JSXFragment"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                },
                {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                {
                    "$ref": "#/definitions/MemberExpressionComputedName"
                },
                {
                    "$ref": "#/definitions/MemberExpressionNonComputedName"
                },
                {
                    "$ref": "#/definitions/MetaProperty"
                },
                {
                    "$ref": "#/definitions/ObjectExpression"
                },
                {
                    "$ref": "#/definitions/SequenceExpression"
                },
                {
                    "$ref": "#/definitions/Super"
                },
                {
                    "$ref": "#/definitions/TaggedTemplateExpression"
                },
                {
                    "$ref": "#/definitions/ThisExpression"
                },
                {
                    "$ref": "#/definitions/TSAsExpression"
                },
                {
                    "$ref": "#/definitions/TSNonNullExpression"
                },
                {
                    "$ref": "#/definitions/TSTypeAssertion"
                }
            ]
        },
        "LetOrConstOrVarDeclaration": {
            "properties": {
                "declarations": {
                    "description": "The variables declared by this declaration.\nNote that there may be 0 declarations (i.e. `const;`).\n```\nlet x;\nlet y, z;\n```",
                    "items": {
                        "$ref": "#/definitions/LetOrConstOrVarDeclarator"
                    },
                    "type": "array"
                },
                "declare": {
                    "description": "Whether the declaration is `declare`d\n```\ndeclare const x = 1;\n```",
                    "type": "boolean"
                },
                "kind": {
                    "description": "The keyword used to declare the variable(s)\n```\nconst x = 1;\nlet y = 2;\nvar z = 3;\n```",
                    "enum": [
                        "const",
                        "let",
                        "var"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LetOrConstOrVarDeclarator": {
            "properties": {
                "definite": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/BindingName"
                },
                "init": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclarator",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Literal": {
            "anyOf": [
                {
                    "$ref": "#/definitions/BigIntLiteral"
                },
                {
                    "$ref": "#/definitions/BooleanLiteral"
                },
                {
                    "$ref": "#/definitions/NullLiteral"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/RegExpLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                }
            ]
        },
        "LogicalExpression": {
            "properties": {
                "left": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "enum": [
                        "&&",
                        "??",
                        "||"
                    ],
                    "type": "string"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "LogicalExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MemberExpressionComputedName": {
            "properties": {
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "object": {
                    "$ref": "#/definitions/Expression"
                },
                "optional": {
                    "type": "boolean"
                },
                "property": {
                    "$ref": "#/definitions/Expression"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "MemberExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MemberExpressionNonComputedName": {
            "properties": {
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "object": {
                    "$ref": "#/definitions/Expression"
                },
                "optional": {
                    "type": "boolean"
                },
                "property": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/PrivateIdentifier"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "MemberExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MetaProperty": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "meta": {
                    "$ref": "#/definitions/Identifier"
                },
                "property": {
                    "$ref": "#/definitions/Identifier"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "MetaProperty",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MethodDefinitionComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "kind": {
                    "enum": [
                        "constructor",
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "MethodDefinition",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "MethodDefinitionNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "key": {
                    "$ref": "#/definitions/ClassPropertyNameNonComputed"
                },
                "kind": {
                    "enum": [
                        "constructor",
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "MethodDefinition",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NamedExportDeclarations": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FunctionDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/FunctionDeclarationWithOptionalName"
                },
                {
                    "$ref": "#/definitions/ClassDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/ClassDeclarationWithOptionalName"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                },
                {
                    "$ref": "#/definitions/TSEnumDeclaration"
                },
                {
                    "$ref": "#/definitions/TSImportEqualsDeclaration"
                },
                {
                    "$ref": "#/definitions/TSInterfaceDeclaration"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationGlobal"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationNamespace"
                },
                {
                    "$ref": "#/definitions/TSTypeAliasDeclaration"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInForOfDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInNormalContextDeclaration"
                }
            ]
        },
        "NewExpression": {
            "properties": {
                "arguments": {
                    "items": {
                        "$ref": "#/definitions/CallExpressionArgument"
                    },
                    "type": "array"
                },
                "callee": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "NewExpression",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "NullLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "const": "null",
                    "type": "string"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "type": "null"
                }
            },
            "type": "object"
        },
        "NumberLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "type": "string"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ObjectExpression": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "properties": {
                    "items": {
                        "$ref": "#/definitions/ObjectLiteralElement"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ObjectExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ObjectLiteralElement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/SpreadElement"
                },
                {
                    "$ref": "#/definitions/PropertyComputedName"
                },
                {
                    "$ref": "#/definitions/PropertyNonComputedName"
                }
            ]
        },
        "ObjectPattern": {
            "properties": {
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "properties": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/RestElement"
                            },
                            {
                                "$ref": "#/definitions/PropertyComputedName"
                            },
                            {
                                "$ref": "#/definitions/PropertyNonComputedName"
                            }
                        ]
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ObjectPattern",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "Operation": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "items": {
                        "$ref": "#/definitions/Property"
                    },
                    "type": "array"
                },
                "path": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "responses": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Interface"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "OperationGroup": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "operations": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Operation"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Parameter": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ArrayPattern"
                },
                {
                    "$ref": "#/definitions/AssignmentPattern"
                },
                {
                    "$ref": "#/definitions/ObjectPattern"
                },
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/RestElement"
                },
                {
                    "$ref": "#/definitions/TSParameterProperty"
                }
            ]
        },
        "Position": {
            "properties": {
                "column": {
                    "description": "Column number on the line (0-indexed)",
                    "type": "number"
                },
                "line": {
                    "description": "Line number (1-indexed)",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PrivateIdentifier": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "type": "string"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "PrivateIdentifier",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProgramStatement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FunctionDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/BlockStatement"
                },
                {
                    "$ref": "#/definitions/BreakStatement"
                },
                {
                    "$ref": "#/definitions/ClassDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/ContinueStatement"
                },
                {
                    "$ref": "#/definitions/DebuggerStatement"
                },
                {
                    "$ref": "#/definitions/ExportAllDeclaration"
                },
                {
                    "$ref": "#/definitions/ExportDefaultDeclaration"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithMultiple"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithSingle"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithSource"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                },
                {
                    "$ref": "#/definitions/TSEnumDeclaration"
                },
                {
                    "$ref": "#/definitions/TSImportEqualsDeclaration"
                },
                {
                    "$ref": "#/definitions/TSInterfaceDeclaration"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationGlobal"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationNamespace"
                },
                {
                    "$ref": "#/definitions/TSNamespaceExportDeclaration"
                },
                {
                    "$ref": "#/definitions/TSTypeAliasDeclaration"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInForOfDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInNormalContextDeclaration"
                },
                {
                    "$ref": "#/definitions/DoWhileStatement"
                },
                {
                    "$ref": "#/definitions/EmptyStatement"
                },
                {
                    "$ref": "#/definitions/ExpressionStatement"
                },
                {
                    "$ref": "#/definitions/ForInStatement"
                },
                {
                    "$ref": "#/definitions/ForOfStatement"
                },
                {
                    "$ref": "#/definitions/ForStatement"
                },
                {
                    "$ref": "#/definitions/IfStatement"
                },
                {
                    "$ref": "#/definitions/ImportDeclaration"
                },
                {
                    "$ref": "#/definitions/WhileStatement"
                },
                {
                    "$ref": "#/definitions/LabeledStatement"
                },
                {
                    "$ref": "#/definitions/ReturnStatement"
                },
                {
                    "$ref": "#/definitions/SwitchStatement"
                },
                {
                    "$ref": "#/definitions/ThrowStatement"
                },
                {
                    "$ref": "#/definitions/TryStatement"
                },
                {
                    "$ref": "#/definitions/TSExportAssignment"
                },
                {
                    "$ref": "#/definitions/WithStatement"
                }
            ]
        },
        "Property": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/Type"
                }
            },
            "type": "object"
        },
        "PropertyComputedName": {
            "properties": {
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "kind": {
                    "enum": [
                        "get",
                        "init",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "method": {
                    "type": "boolean"
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "shorthand": {
                    "type": "boolean"
                },
                "type": {
                    "const": "Property",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentPattern"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "PropertyDefinitionComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "PropertyDefinition",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "PropertyDefinitionNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/ClassPropertyNameNonComputed"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "PropertyDefinition",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "PropertyNameNonComputed": {
            "anyOf": [
                {
                    "$ref": "#/definitions/Identifier"
                },
                {
                    "$ref": "#/definitions/NumberLiteral"
                },
                {
                    "$ref": "#/definitions/StringLiteral"
                }
            ]
        },
        "PropertyNonComputedName": {
            "properties": {
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "kind": {
                    "enum": [
                        "get",
                        "init",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "method": {
                    "type": "boolean"
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "shorthand": {
                    "type": "boolean"
                },
                "type": {
                    "const": "Property",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentPattern"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "RegExp": {
            "properties": {
                "dotAll": {
                    "type": "boolean"
                },
                "flags": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "hasIndices": {
                    "type": "boolean"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "lastIndex": {
                    "type": "number"
                },
                "multiline": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "sticky": {
                    "type": "boolean"
                },
                "unicode": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RegExpLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "type": "string"
                },
                "regex": {
                    "properties": {
                        "flags": {
                            "type": "string"
                        },
                        "pattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "RestElement": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/DestructuringPattern"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "RestElement",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "$ref": "#/definitions/AssignmentPattern"
                }
            },
            "type": "object"
        },
        "ReturnStatement": {
            "properties": {
                "argument": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ReturnStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SequenceExpression": {
            "properties": {
                "expressions": {
                    "items": {
                        "$ref": "#/definitions/Expression"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "SequenceExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SourceLocation": {
            "properties": {
                "end": {
                    "$ref": "#/definitions/Position",
                    "description": "The position of the first character after the parsed source region"
                },
                "start": {
                    "$ref": "#/definitions/Position",
                    "description": "The position of the first character of the parsed source region"
                }
            },
            "type": "object"
        },
        "SpreadElement": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "SpreadElement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Statement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FunctionDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/BlockStatement"
                },
                {
                    "$ref": "#/definitions/BreakStatement"
                },
                {
                    "$ref": "#/definitions/ClassDeclarationWithName"
                },
                {
                    "$ref": "#/definitions/ContinueStatement"
                },
                {
                    "$ref": "#/definitions/DebuggerStatement"
                },
                {
                    "$ref": "#/definitions/ExportAllDeclaration"
                },
                {
                    "$ref": "#/definitions/ExportDefaultDeclaration"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithMultiple"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithSingle"
                },
                {
                    "$ref": "#/definitions/ExportNamedDeclarationWithSource"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                },
                {
                    "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                },
                {
                    "$ref": "#/definitions/TSEnumDeclaration"
                },
                {
                    "$ref": "#/definitions/TSImportEqualsDeclaration"
                },
                {
                    "$ref": "#/definitions/TSInterfaceDeclaration"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationGlobal"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                },
                {
                    "$ref": "#/definitions/TSModuleDeclarationNamespace"
                },
                {
                    "$ref": "#/definitions/TSNamespaceExportDeclaration"
                },
                {
                    "$ref": "#/definitions/TSTypeAliasDeclaration"
                },
                {
                    "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInForOfDeclaration"
                },
                {
                    "$ref": "#/definitions/UsingInNormalContextDeclaration"
                },
                {
                    "$ref": "#/definitions/DoWhileStatement"
                },
                {
                    "$ref": "#/definitions/EmptyStatement"
                },
                {
                    "$ref": "#/definitions/ExpressionStatement"
                },
                {
                    "$ref": "#/definitions/ForInStatement"
                },
                {
                    "$ref": "#/definitions/ForOfStatement"
                },
                {
                    "$ref": "#/definitions/ForStatement"
                },
                {
                    "$ref": "#/definitions/IfStatement"
                },
                {
                    "$ref": "#/definitions/ImportDeclaration"
                },
                {
                    "$ref": "#/definitions/WhileStatement"
                },
                {
                    "$ref": "#/definitions/LabeledStatement"
                },
                {
                    "$ref": "#/definitions/ReturnStatement"
                },
                {
                    "$ref": "#/definitions/SwitchStatement"
                },
                {
                    "$ref": "#/definitions/ThrowStatement"
                },
                {
                    "$ref": "#/definitions/TryStatement"
                },
                {
                    "$ref": "#/definitions/TSExportAssignment"
                },
                {
                    "$ref": "#/definitions/WithStatement"
                }
            ]
        },
        "StaticBlock": {
            "properties": {
                "body": {
                    "items": {
                        "$ref": "#/definitions/Statement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "StaticBlock",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StringLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "raw": {
                    "type": "string"
                },
                "type": {
                    "const": "Literal",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Super": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "Super",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SwitchCase": {
            "properties": {
                "consequent": {
                    "items": {
                        "$ref": "#/definitions/Statement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "type": {
                    "const": "SwitchCase",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SwitchStatement": {
            "properties": {
                "cases": {
                    "items": {
                        "$ref": "#/definitions/SwitchCase"
                    },
                    "type": "array"
                },
                "discriminant": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "SwitchStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSAbstractAccessorPropertyComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractAccessorProperty",
                    "description": "TS-prefixed nodes",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "type": "null"
                }
            },
            "type": "object"
        },
        "TSAbstractAccessorPropertyNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractAccessorProperty",
                    "description": "TS-prefixed nodes",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "type": "null"
                }
            },
            "type": "object"
        },
        "TSAbstractKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSAbstractKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSAbstractMethodDefinitionComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "kind": {
                    "enum": [
                        "constructor",
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractMethodDefinition",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "TSAbstractMethodDefinitionNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "kind": {
                    "enum": [
                        "constructor",
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractMethodDefinition",
                    "type": "string"
                },
                "value": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/TSEmptyBodyFunctionExpression"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "TSAbstractPropertyDefinitionComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractPropertyDefinition",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "type": "null"
                }
            },
            "type": "object"
        },
        "TSAbstractPropertyDefinitionNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "declare": {
                    "type": "boolean"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "definite": {
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "override": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSAbstractPropertyDefinition",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "value": {
                    "type": "null"
                }
            },
            "type": "object"
        },
        "TSAnyKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSAnyKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSArrayType": {
            "properties": {
                "elementType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSArrayType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSAsExpression": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSAsExpression",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSAsyncKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSAsyncKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSBigIntKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSBigIntKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSBooleanKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSBooleanKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSCallSignatureDeclaration": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "type": {
                    "const": "TSCallSignatureDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSClassImplements": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSClassImplements",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TSConditionalType": {
            "properties": {
                "checkType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "extendsType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "falseType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "trueType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "type": {
                    "const": "TSConditionalType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSConstructSignatureDeclaration": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "type": {
                    "const": "TSConstructSignatureDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSConstructorType": {
            "properties": {
                "abstract": {
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "type": {
                    "const": "TSConstructorType",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSDeclareFunctionNoDeclare": {
            "description": "Function declaration without the `declare` keyword:\n```\nfunction foo(): void;\n```\nThis can either be an overload signature or a declaration in an ambient context\n(e.g. `declare module`)",
            "properties": {
                "async": {
                    "description": "Whether the function is async:\n```\nasync function foo(...) {...}\nconst x = async function (...) {...}\nconst x = async (...) => {...}\n```",
                    "type": "boolean"
                },
                "declare": {
                    "const": false,
                    "description": "Whether the declaration has `declare` modifier.",
                    "type": "boolean"
                },
                "expression": {
                    "const": false,
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "const": false,
                    "description": "- TS1221: Generators are not allowed in an ambient context.\n- TS1222: An overload signature cannot be declared as a generator.",
                    "type": "boolean"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "TSDeclareFunction",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "TSDeclareFunctionWithDeclare": {
            "description": "Function declaration with the `declare` keyword:\n```\ndeclare function foo(): void;\n```",
            "properties": {
                "async": {
                    "const": false,
                    "description": "TS1040: 'async' modifier cannot be used in an ambient context.",
                    "type": "boolean"
                },
                "declare": {
                    "const": true,
                    "description": "Whether the declaration has `declare` modifier.",
                    "type": "boolean"
                },
                "expression": {
                    "const": false,
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "const": false,
                    "description": "TS1221: Generators are not allowed in an ambient context.",
                    "type": "boolean"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "TSDeclareFunction",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "TSDeclareKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSDeclareKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSEmptyBodyFunctionExpression": {
            "properties": {
                "async": {
                    "description": "Whether the function is async:\n```\nasync function foo(...) {...}\nconst x = async function (...) {...}\nconst x = async (...) => {...}\n```",
                    "type": "boolean"
                },
                "body": {
                    "description": "The body of the function.\n- For an `ArrowFunctionExpression` this may be an `Expression` or `BlockStatement`.\n- For a `FunctionDeclaration` or `FunctionExpression` this is always a `BlockStatement.\n- For a `TSDeclareFunction` this is always `undefined`.\n- For a `TSEmptyBodyFunctionExpression` this is always `null`.",
                    "type": "null"
                },
                "declare": {
                    "description": "This is only `true` if and only if the node is a `TSDeclareFunction` and it has `declare`:\n```\ndeclare function foo(...) {...}\n```",
                    "type": "boolean"
                },
                "expression": {
                    "description": "This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body\nis an expression:\n```\n(() => 1)\n```",
                    "type": "boolean"
                },
                "generator": {
                    "description": "Whether the function is a generator function:\n```\nfunction *foo(...) {...}\nconst x = function *(...) {...}\n```\nThis is always `false` for arrow functions as they cannot be generators.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The function's name.\n- For an `ArrowFunctionExpression` this is always `null`.\n- For a `FunctionExpression` this may be `null` if the name is omitted.\n- For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n  and only if the parent is an `ExportDefaultDeclaration`.",
                    "type": "null"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "description": "The list of parameters declared for the function.",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation",
                    "description": "The return type annotation for the function."
                },
                "type": {
                    "const": "TSEmptyBodyFunctionExpression",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameter declaration for the function."
                }
            },
            "type": "object"
        },
        "TSEnumDeclaration": {
            "properties": {
                "const": {
                    "description": "Whether this is a `const` enum.\n```\nconst enum Foo {...}\n```",
                    "type": "boolean"
                },
                "declare": {
                    "description": "Whether this is a `declare`d enum.\n```\ndeclare enum Foo {...}\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The enum name."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "members": {
                    "description": "The enum members.",
                    "items": {
                        "$ref": "#/definitions/TSEnumMember"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSEnumDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSEnumMember": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TSEnumMemberComputedName"
                },
                {
                    "$ref": "#/definitions/TSEnumMemberNonComputedName"
                }
            ]
        },
        "TSEnumMemberComputedName": {
            "description": "this should only really happen in semantically invalid code (errors 1164 and 2452)\n\nVALID:\nenum Foo { ['a'] }\n\nINVALID:\nconst x = 'a';\nenum Foo { [x] }\nenum Bar { ['a' + 'b'] }",
            "properties": {
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Expression"
                },
                "initializer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSEnumMember",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSEnumMemberNonComputedName": {
            "properties": {
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "initializer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSEnumMember",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSExportAssignment": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSExportAssignment",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSExportKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSExportKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSExternalModuleReference": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/StringLiteral"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSExternalModuleReference",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSFunctionType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "type": {
                    "const": "TSFunctionType",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSImportEqualsDeclaration": {
            "properties": {
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The locally imported name"
                },
                "importKind": {
                    "$ref": "#/definitions/ImportKind"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "moduleReference": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSExternalModuleReference"
                        }
                    ],
                    "description": "The value being aliased.\n```\nimport F1 = A;\nimport F2 = A.B.C;\nimport F3 = require('mod');\n```"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSImportEqualsDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSImportType": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/TypeNode"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "qualifier": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSImportType",
                    "type": "string"
                },
                "typeArguments": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSTypeParameterInstantiation"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "typeParameters": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSTypeParameterInstantiation"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "TSIndexSignature": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "parameters": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSIndexSignature",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "TSIndexedAccessType": {
            "properties": {
                "indexType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "objectType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSIndexedAccessType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSInferType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSInferType",
                    "type": "string"
                },
                "typeParameter": {
                    "$ref": "#/definitions/TSTypeParameter"
                }
            },
            "type": "object"
        },
        "TSInstantiationExpression": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSInstantiationExpression",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TSInterfaceBody": {
            "properties": {
                "body": {
                    "items": {
                        "$ref": "#/definitions/TypeElement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSInterfaceBody",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSInterfaceDeclaration": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSInterfaceBody",
                    "description": "The body of the interface"
                },
                "declare": {
                    "description": "Whether the interface was `declare`d, `undefined` otherwise",
                    "type": "boolean"
                },
                "extends": {
                    "description": "The types this interface `extends`",
                    "items": {
                        "$ref": "#/definitions/TSInterfaceHeritage"
                    },
                    "type": "array"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The name of this interface"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSInterfaceDeclaration",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameters declared for the interface."
                }
            },
            "type": "object"
        },
        "TSInterfaceHeritage": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSInterfaceHeritage",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TSIntersectionType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSIntersectionType",
                    "type": "string"
                },
                "types": {
                    "items": {
                        "$ref": "#/definitions/TypeNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TSIntrinsicKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSIntrinsicKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSLiteralType": {
            "properties": {
                "literal": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSLiteralType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSMappedType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "nameType": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSAbstractKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSAnyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSArrayType"
                        },
                        {
                            "$ref": "#/definitions/TSAsyncKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBigIntKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBooleanKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSConditionalType"
                        },
                        {
                            "$ref": "#/definitions/TSConstructorType"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSExportKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSFunctionType"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        },
                        {
                            "$ref": "#/definitions/TSIndexedAccessType"
                        },
                        {
                            "$ref": "#/definitions/TSInferType"
                        },
                        {
                            "$ref": "#/definitions/TSIntersectionType"
                        },
                        {
                            "$ref": "#/definitions/TSIntrinsicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSMappedType"
                        },
                        {
                            "$ref": "#/definitions/TSNamedTupleMember"
                        },
                        {
                            "$ref": "#/definitions/TSNeverKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNullKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNumberKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSObjectKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSOptionalType"
                        },
                        {
                            "$ref": "#/definitions/TSPrivateKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSProtectedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSPublicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSReadonlyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSRestType"
                        },
                        {
                            "$ref": "#/definitions/TSStaticKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSStringKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSSymbolKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSTemplateLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        },
                        {
                            "$ref": "#/definitions/TSTupleType"
                        },
                        {
                            "$ref": "#/definitions/TSTypeLiteral"
                        },
                        {
                            "$ref": "#/definitions/TSTypeOperator"
                        },
                        {
                            "$ref": "#/definitions/TSTypePredicate"
                        },
                        {
                            "$ref": "#/definitions/TSTypeQuery"
                        },
                        {
                            "$ref": "#/definitions/TSTypeReference"
                        },
                        {
                            "$ref": "#/definitions/TSUndefinedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSUnionType"
                        },
                        {
                            "$ref": "#/definitions/TSUnknownKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSVoidKeyword"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "optional": {
                    "enum": [
                        "+",
                        "-",
                        false,
                        true
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "enum": [
                        "+",
                        "-",
                        false,
                        true
                    ]
                },
                "type": {
                    "const": "TSMappedType",
                    "type": "string"
                },
                "typeAnnotation": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSAbstractKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSAnyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSArrayType"
                        },
                        {
                            "$ref": "#/definitions/TSAsyncKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBigIntKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBooleanKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSConditionalType"
                        },
                        {
                            "$ref": "#/definitions/TSConstructorType"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSExportKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSFunctionType"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        },
                        {
                            "$ref": "#/definitions/TSIndexedAccessType"
                        },
                        {
                            "$ref": "#/definitions/TSInferType"
                        },
                        {
                            "$ref": "#/definitions/TSIntersectionType"
                        },
                        {
                            "$ref": "#/definitions/TSIntrinsicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSMappedType"
                        },
                        {
                            "$ref": "#/definitions/TSNamedTupleMember"
                        },
                        {
                            "$ref": "#/definitions/TSNeverKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNullKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNumberKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSObjectKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSOptionalType"
                        },
                        {
                            "$ref": "#/definitions/TSPrivateKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSProtectedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSPublicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSReadonlyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSRestType"
                        },
                        {
                            "$ref": "#/definitions/TSStaticKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSStringKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSSymbolKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSTemplateLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        },
                        {
                            "$ref": "#/definitions/TSTupleType"
                        },
                        {
                            "$ref": "#/definitions/TSTypeLiteral"
                        },
                        {
                            "$ref": "#/definitions/TSTypeOperator"
                        },
                        {
                            "$ref": "#/definitions/TSTypePredicate"
                        },
                        {
                            "$ref": "#/definitions/TSTypeQuery"
                        },
                        {
                            "$ref": "#/definitions/TSTypeReference"
                        },
                        {
                            "$ref": "#/definitions/TSUndefinedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSUnionType"
                        },
                        {
                            "$ref": "#/definitions/TSUnknownKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSVoidKeyword"
                        }
                    ]
                },
                "typeParameter": {
                    "$ref": "#/definitions/TSTypeParameter"
                }
            },
            "type": "object"
        },
        "TSMethodSignatureComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "kind": {
                    "enum": [
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSMethodSignature",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSMethodSignatureNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "kind": {
                    "enum": [
                        "get",
                        "method",
                        "set"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "returnType": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSMethodSignature",
                    "type": "string"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration"
                }
            },
            "type": "object"
        },
        "TSModuleBlock": {
            "properties": {
                "body": {
                    "items": {
                        "$ref": "#/definitions/ProgramStatement"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleBlock",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSModuleDeclarationGlobal": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSModuleBlock",
                    "description": "The body of the module.\nThis can only be `undefined` for the code `declare module 'mod';`\nThis will be a `TSModuleDeclaration` if the name is \"nested\" (`Foo.Bar`)."
                },
                "declare": {
                    "description": "Whether the module is `declare`d\n```\ndeclare namespace F {}\n```",
                    "type": "boolean"
                },
                "global": {
                    "description": "Whether this is a global declaration\n```\ndeclare global {}\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The name of the module\n```\nnamespace A {}\nnamespace A.B.C {}\nmodule 'a' {}\n```"
                },
                "kind": {
                    "const": "global",
                    "description": "The keyword used to define this module declaration\n```\nnamespace Foo {}\n^^^^^^^^^\n\nmodule 'foo' {}\n^^^^^^\n\ndeclare global {}\n        ^^^^^^\n```",
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSModuleDeclarationModuleWithIdentifierId": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSModuleBlock",
                    "description": "The body of the module.\nThis can only be `undefined` for the code `declare module 'mod';`\nThis will be a `TSModuleDeclaration` if the name is \"nested\" (`Foo.Bar`)."
                },
                "declare": {
                    "description": "Whether the module is `declare`d\n```\ndeclare namespace F {}\n```",
                    "type": "boolean"
                },
                "global": {
                    "description": "Whether this is a global declaration\n```\ndeclare global {}\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The name of the module\n```\nnamespace A {}\nnamespace A.B.C {}\nmodule 'a' {}\n```"
                },
                "kind": {
                    "const": "module",
                    "description": "The keyword used to define this module declaration\n```\nnamespace Foo {}\n^^^^^^^^^\n\nmodule 'foo' {}\n^^^^^^\n\ndeclare global {}\n        ^^^^^^\n```",
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSModuleDeclarationModuleWithStringIdDeclared": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSModuleBlock",
                    "description": "The body of the module.\nThis can only be `undefined` for the code `declare module 'mod';`\nThis will be a `TSModuleDeclaration` if the name is \"nested\" (`Foo.Bar`)."
                },
                "declare": {
                    "const": true,
                    "description": "Whether the module is `declare`d\n```\ndeclare namespace F {}\n```",
                    "type": "boolean"
                },
                "global": {
                    "description": "Whether this is a global declaration\n```\ndeclare global {}\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/StringLiteral",
                    "description": "The name of the module\n```\nnamespace A {}\nnamespace A.B.C {}\nmodule 'a' {}\n```"
                },
                "kind": {
                    "const": "module",
                    "description": "The keyword used to define this module declaration\n```\nnamespace Foo {}\n^^^^^^^^^\n\nmodule 'foo' {}\n^^^^^^\n\ndeclare global {}\n        ^^^^^^\n```",
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSModuleDeclarationModuleWithStringIdNotDeclared": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSModuleBlock",
                    "description": "The body of the module.\nThis can only be `undefined` for the code `declare module 'mod';`\nThis will be a `TSModuleDeclaration` if the name is \"nested\" (`Foo.Bar`)."
                },
                "declare": {
                    "const": false,
                    "description": "Whether the module is `declare`d\n```\ndeclare namespace F {}\n```",
                    "type": "boolean"
                },
                "global": {
                    "description": "Whether this is a global declaration\n```\ndeclare global {}\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/StringLiteral",
                    "description": "The name of the module\n```\nnamespace A {}\nnamespace A.B.C {}\nmodule 'a' {}\n```"
                },
                "kind": {
                    "const": "module",
                    "description": "The keyword used to define this module declaration\n```\nnamespace Foo {}\n^^^^^^^^^\n\nmodule 'foo' {}\n^^^^^^\n\ndeclare global {}\n        ^^^^^^\n```",
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSModuleDeclarationNamespace": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/TSModuleBlock",
                    "description": "The body of the module.\nThis can only be `undefined` for the code `declare module 'mod';`\nThis will be a `TSModuleDeclaration` if the name is \"nested\" (`Foo.Bar`)."
                },
                "declare": {
                    "description": "Whether the module is `declare`d\n```\ndeclare namespace F {}\n```",
                    "type": "boolean"
                },
                "global": {
                    "description": "Whether this is a global declaration\n```\ndeclare global {}\n```",
                    "type": "boolean"
                },
                "id": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        }
                    ],
                    "description": "The name of the module\n```\nnamespace A {}\nnamespace A.B.C {}\nmodule 'a' {}\n```"
                },
                "kind": {
                    "const": "namespace",
                    "description": "The keyword used to define this module declaration\n```\nnamespace Foo {}\n^^^^^^^^^\n\nmodule 'foo' {}\n^^^^^^\n\ndeclare global {}\n        ^^^^^^\n```",
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSModuleDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNamedTupleMember": {
            "properties": {
                "elementType": {
                    "$ref": "#/definitions/TypeNode"
                },
                "label": {
                    "$ref": "#/definitions/Identifier"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNamedTupleMember",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNamespaceExportDeclaration": {
            "properties": {
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The name the global variable being exported to"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNamespaceExportDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNeverKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNeverKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNonNullExpression": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNonNullExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNullKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNullKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSNumberKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSNumberKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSObjectKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSObjectKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSOptionalType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSOptionalType",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSParameterProperty": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "decorators": {
                    "items": {
                        "$ref": "#/definitions/Decorator"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "override": {
                    "type": "boolean"
                },
                "parameter": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/AssignmentPattern"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/RestElement"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSParameterProperty",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSPrivateKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSPrivateKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSPropertySignatureComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": true,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSPropertySignature",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "TSPropertySignatureNonComputedName": {
            "properties": {
                "accessibility": {
                    "enum": [
                        "private",
                        "protected",
                        "public"
                    ],
                    "type": "string"
                },
                "computed": {
                    "const": false,
                    "type": "boolean"
                },
                "key": {
                    "$ref": "#/definitions/PropertyNameNonComputed"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "optional": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "readonly": {
                    "type": "boolean"
                },
                "static": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TSPropertySignature",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "TSProtectedKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSProtectedKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSPublicKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSPublicKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSQualifiedName": {
            "properties": {
                "left": {
                    "$ref": "#/definitions/EntityName"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "right": {
                    "$ref": "#/definitions/Identifier"
                },
                "type": {
                    "const": "TSQualifiedName",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSReadonlyKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSReadonlyKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSRestType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSRestType",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSSatisfiesExpression": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSSatisfiesExpression",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSStaticKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSStaticKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSStringKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSStringKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSSymbolKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSSymbolKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTemplateLiteralType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "quasis": {
                    "items": {
                        "$ref": "#/definitions/TemplateElement"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTemplateLiteralType",
                    "type": "string"
                },
                "types": {
                    "items": {
                        "$ref": "#/definitions/TypeNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TSThisType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSThisType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTupleType": {
            "properties": {
                "elementTypes": {
                    "items": {
                        "$ref": "#/definitions/TypeNode"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTupleType",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTypeAliasDeclaration": {
            "properties": {
                "declare": {
                    "description": "Whether the type was `declare`d.\n```\ndeclare type T = 1;\n```",
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier",
                    "description": "The name of the type."
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeAliasDeclaration",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode",
                    "description": "The \"value\" (type) of the declaration"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterDeclaration",
                    "description": "The generic type parameters declared for the type."
                }
            },
            "type": "object"
        },
        "TSTypeAnnotation": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeAnnotation",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSTypeAssertion": {
            "properties": {
                "expression": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeAssertion",
                    "type": "string"
                },
                "typeAnnotation": {
                    "$ref": "#/definitions/TypeNode"
                }
            },
            "type": "object"
        },
        "TSTypeLiteral": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "members": {
                    "items": {
                        "$ref": "#/definitions/TypeElement"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeLiteral",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTypeOperator": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "enum": [
                        "keyof",
                        "readonly",
                        "unique"
                    ],
                    "type": "string"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeOperator",
                    "type": "string"
                },
                "typeAnnotation": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSAbstractKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSAnyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSArrayType"
                        },
                        {
                            "$ref": "#/definitions/TSAsyncKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBigIntKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBooleanKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSConditionalType"
                        },
                        {
                            "$ref": "#/definitions/TSConstructorType"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSExportKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSFunctionType"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        },
                        {
                            "$ref": "#/definitions/TSIndexedAccessType"
                        },
                        {
                            "$ref": "#/definitions/TSInferType"
                        },
                        {
                            "$ref": "#/definitions/TSIntersectionType"
                        },
                        {
                            "$ref": "#/definitions/TSIntrinsicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSMappedType"
                        },
                        {
                            "$ref": "#/definitions/TSNamedTupleMember"
                        },
                        {
                            "$ref": "#/definitions/TSNeverKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNullKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNumberKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSObjectKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSOptionalType"
                        },
                        {
                            "$ref": "#/definitions/TSPrivateKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSProtectedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSPublicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSReadonlyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSRestType"
                        },
                        {
                            "$ref": "#/definitions/TSStaticKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSStringKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSSymbolKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSTemplateLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        },
                        {
                            "$ref": "#/definitions/TSTupleType"
                        },
                        {
                            "$ref": "#/definitions/TSTypeLiteral"
                        },
                        {
                            "$ref": "#/definitions/TSTypeOperator"
                        },
                        {
                            "$ref": "#/definitions/TSTypePredicate"
                        },
                        {
                            "$ref": "#/definitions/TSTypeQuery"
                        },
                        {
                            "$ref": "#/definitions/TSTypeReference"
                        },
                        {
                            "$ref": "#/definitions/TSUndefinedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSUnionType"
                        },
                        {
                            "$ref": "#/definitions/TSUnknownKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSVoidKeyword"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "TSTypeParameter": {
            "properties": {
                "const": {
                    "type": "boolean"
                },
                "constraint": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSAbstractKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSAnyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSArrayType"
                        },
                        {
                            "$ref": "#/definitions/TSAsyncKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBigIntKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBooleanKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSConditionalType"
                        },
                        {
                            "$ref": "#/definitions/TSConstructorType"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSExportKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSFunctionType"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        },
                        {
                            "$ref": "#/definitions/TSIndexedAccessType"
                        },
                        {
                            "$ref": "#/definitions/TSInferType"
                        },
                        {
                            "$ref": "#/definitions/TSIntersectionType"
                        },
                        {
                            "$ref": "#/definitions/TSIntrinsicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSMappedType"
                        },
                        {
                            "$ref": "#/definitions/TSNamedTupleMember"
                        },
                        {
                            "$ref": "#/definitions/TSNeverKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNullKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNumberKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSObjectKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSOptionalType"
                        },
                        {
                            "$ref": "#/definitions/TSPrivateKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSProtectedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSPublicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSReadonlyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSRestType"
                        },
                        {
                            "$ref": "#/definitions/TSStaticKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSStringKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSSymbolKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSTemplateLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        },
                        {
                            "$ref": "#/definitions/TSTupleType"
                        },
                        {
                            "$ref": "#/definitions/TSTypeLiteral"
                        },
                        {
                            "$ref": "#/definitions/TSTypeOperator"
                        },
                        {
                            "$ref": "#/definitions/TSTypePredicate"
                        },
                        {
                            "$ref": "#/definitions/TSTypeQuery"
                        },
                        {
                            "$ref": "#/definitions/TSTypeReference"
                        },
                        {
                            "$ref": "#/definitions/TSUndefinedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSUnionType"
                        },
                        {
                            "$ref": "#/definitions/TSUnknownKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSVoidKeyword"
                        }
                    ]
                },
                "default": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSAbstractKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSAnyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSArrayType"
                        },
                        {
                            "$ref": "#/definitions/TSAsyncKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBigIntKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSBooleanKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSConditionalType"
                        },
                        {
                            "$ref": "#/definitions/TSConstructorType"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSExportKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSFunctionType"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        },
                        {
                            "$ref": "#/definitions/TSIndexedAccessType"
                        },
                        {
                            "$ref": "#/definitions/TSInferType"
                        },
                        {
                            "$ref": "#/definitions/TSIntersectionType"
                        },
                        {
                            "$ref": "#/definitions/TSIntrinsicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSMappedType"
                        },
                        {
                            "$ref": "#/definitions/TSNamedTupleMember"
                        },
                        {
                            "$ref": "#/definitions/TSNeverKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNullKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSNumberKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSObjectKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSOptionalType"
                        },
                        {
                            "$ref": "#/definitions/TSPrivateKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSProtectedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSPublicKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSReadonlyKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSRestType"
                        },
                        {
                            "$ref": "#/definitions/TSStaticKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSStringKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSSymbolKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSTemplateLiteralType"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        },
                        {
                            "$ref": "#/definitions/TSTupleType"
                        },
                        {
                            "$ref": "#/definitions/TSTypeLiteral"
                        },
                        {
                            "$ref": "#/definitions/TSTypeOperator"
                        },
                        {
                            "$ref": "#/definitions/TSTypePredicate"
                        },
                        {
                            "$ref": "#/definitions/TSTypeQuery"
                        },
                        {
                            "$ref": "#/definitions/TSTypeReference"
                        },
                        {
                            "$ref": "#/definitions/TSUndefinedKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSUnionType"
                        },
                        {
                            "$ref": "#/definitions/TSUnknownKeyword"
                        },
                        {
                            "$ref": "#/definitions/TSVoidKeyword"
                        }
                    ]
                },
                "in": {
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "name": {
                    "$ref": "#/definitions/Identifier"
                },
                "out": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeParameter",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTypeParameterDeclaration": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/TSTypeParameter"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeParameterDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTypeParameterInstantiation": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "params": {
                    "items": {
                        "$ref": "#/definitions/TypeNode"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeParameterInstantiation",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSTypePredicate": {
            "properties": {
                "asserts": {
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "parameterName": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/TSThisType"
                        }
                    ]
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypePredicate",
                    "type": "string"
                },
                "typeAnnotation": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TSTypeAnnotation"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "TSTypeQuery": {
            "properties": {
                "exprName": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSQualifiedName"
                        },
                        {
                            "$ref": "#/definitions/TSImportType"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeQuery",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TSTypeReference": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSTypeReference",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeName": {
                    "$ref": "#/definitions/EntityName"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TSUndefinedKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSUndefinedKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSUnionType": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSUnionType",
                    "type": "string"
                },
                "types": {
                    "items": {
                        "$ref": "#/definitions/TypeNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TSUnknownKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSUnknownKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TSVoidKeyword": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TSVoidKeyword",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TaggedTemplateExpression": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "quasi": {
                    "$ref": "#/definitions/TemplateLiteral"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "tag": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "TaggedTemplateExpression",
                    "type": "string"
                },
                "typeArguments": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                },
                "typeParameters": {
                    "$ref": "#/definitions/TSTypeParameterInstantiation"
                }
            },
            "type": "object"
        },
        "TemplateElement": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "tail": {
                    "type": "boolean"
                },
                "type": {
                    "const": "TemplateElement",
                    "type": "string"
                },
                "value": {
                    "properties": {
                        "cooked": {
                            "type": "string"
                        },
                        "raw": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "TemplateLiteral": {
            "properties": {
                "expressions": {
                    "items": {
                        "$ref": "#/definitions/Expression"
                    },
                    "type": "array"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "quasis": {
                    "items": {
                        "$ref": "#/definitions/TemplateElement"
                    },
                    "type": "array"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TemplateLiteral",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ThisExpression": {
            "properties": {
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ThisExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ThrowStatement": {
            "properties": {
                "argument": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FunctionDeclarationWithName"
                        },
                        {
                            "$ref": "#/definitions/BlockStatement"
                        },
                        {
                            "$ref": "#/definitions/BreakStatement"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassDeclarationWithName"
                        },
                        {
                            "$ref": "#/definitions/ContinueStatement"
                        },
                        {
                            "$ref": "#/definitions/DebuggerStatement"
                        },
                        {
                            "$ref": "#/definitions/ExportAllDeclaration"
                        },
                        {
                            "$ref": "#/definitions/ExportDefaultDeclaration"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithMultiple"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithoutSourceWithSingle"
                        },
                        {
                            "$ref": "#/definitions/ExportNamedDeclarationWithSource"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareFunctionNoDeclare"
                        },
                        {
                            "$ref": "#/definitions/TSDeclareFunctionWithDeclare"
                        },
                        {
                            "$ref": "#/definitions/TSEnumDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSImportEqualsDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSInterfaceDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationGlobal"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithIdentifierId"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdDeclared"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationModuleWithStringIdNotDeclared"
                        },
                        {
                            "$ref": "#/definitions/TSModuleDeclarationNamespace"
                        },
                        {
                            "$ref": "#/definitions/TSNamespaceExportDeclaration"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAliasDeclaration"
                        },
                        {
                            "$ref": "#/definitions/LetOrConstOrVarDeclaration"
                        },
                        {
                            "$ref": "#/definitions/UsingInForOfDeclaration"
                        },
                        {
                            "$ref": "#/definitions/UsingInNormalContextDeclaration"
                        },
                        {
                            "$ref": "#/definitions/DoWhileStatement"
                        },
                        {
                            "$ref": "#/definitions/EmptyStatement"
                        },
                        {
                            "$ref": "#/definitions/ExpressionStatement"
                        },
                        {
                            "$ref": "#/definitions/ForInStatement"
                        },
                        {
                            "$ref": "#/definitions/ForOfStatement"
                        },
                        {
                            "$ref": "#/definitions/ForStatement"
                        },
                        {
                            "$ref": "#/definitions/IfStatement"
                        },
                        {
                            "$ref": "#/definitions/ImportDeclaration"
                        },
                        {
                            "$ref": "#/definitions/WhileStatement"
                        },
                        {
                            "$ref": "#/definitions/LabeledStatement"
                        },
                        {
                            "$ref": "#/definitions/ReturnStatement"
                        },
                        {
                            "$ref": "#/definitions/SwitchStatement"
                        },
                        {
                            "$ref": "#/definitions/ThrowStatement"
                        },
                        {
                            "$ref": "#/definitions/TryStatement"
                        },
                        {
                            "$ref": "#/definitions/TSExportAssignment"
                        },
                        {
                            "$ref": "#/definitions/WithStatement"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "ThrowStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TryStatement": {
            "properties": {
                "block": {
                    "$ref": "#/definitions/BlockStatement"
                },
                "finalizer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BlockStatement"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "handler": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CatchClause"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "TryStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Type": {
            "properties": {
                "#annotation": {
                    "$ref": "#/definitions/TSTypeAnnotation"
                }
            },
            "type": "object"
        },
        "TypeElement": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TSIndexSignature"
                },
                {
                    "$ref": "#/definitions/TSCallSignatureDeclaration"
                },
                {
                    "$ref": "#/definitions/TSConstructSignatureDeclaration"
                },
                {
                    "$ref": "#/definitions/TSMethodSignatureComputedName"
                },
                {
                    "$ref": "#/definitions/TSMethodSignatureNonComputedName"
                },
                {
                    "$ref": "#/definitions/TSPropertySignatureComputedName"
                },
                {
                    "$ref": "#/definitions/TSPropertySignatureNonComputedName"
                }
            ]
        },
        "TypeNode": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TSQualifiedName"
                },
                {
                    "$ref": "#/definitions/TSAbstractKeyword"
                },
                {
                    "$ref": "#/definitions/TSAnyKeyword"
                },
                {
                    "$ref": "#/definitions/TSArrayType"
                },
                {
                    "$ref": "#/definitions/TSAsyncKeyword"
                },
                {
                    "$ref": "#/definitions/TSBigIntKeyword"
                },
                {
                    "$ref": "#/definitions/TSBooleanKeyword"
                },
                {
                    "$ref": "#/definitions/TSConditionalType"
                },
                {
                    "$ref": "#/definitions/TSConstructorType"
                },
                {
                    "$ref": "#/definitions/TSDeclareKeyword"
                },
                {
                    "$ref": "#/definitions/TSExportKeyword"
                },
                {
                    "$ref": "#/definitions/TSFunctionType"
                },
                {
                    "$ref": "#/definitions/TSImportType"
                },
                {
                    "$ref": "#/definitions/TSIndexedAccessType"
                },
                {
                    "$ref": "#/definitions/TSInferType"
                },
                {
                    "$ref": "#/definitions/TSIntersectionType"
                },
                {
                    "$ref": "#/definitions/TSIntrinsicKeyword"
                },
                {
                    "$ref": "#/definitions/TSLiteralType"
                },
                {
                    "$ref": "#/definitions/TSMappedType"
                },
                {
                    "$ref": "#/definitions/TSNamedTupleMember"
                },
                {
                    "$ref": "#/definitions/TSNeverKeyword"
                },
                {
                    "$ref": "#/definitions/TSNullKeyword"
                },
                {
                    "$ref": "#/definitions/TSNumberKeyword"
                },
                {
                    "$ref": "#/definitions/TSObjectKeyword"
                },
                {
                    "$ref": "#/definitions/TSOptionalType"
                },
                {
                    "$ref": "#/definitions/TSPrivateKeyword"
                },
                {
                    "$ref": "#/definitions/TSProtectedKeyword"
                },
                {
                    "$ref": "#/definitions/TSPublicKeyword"
                },
                {
                    "$ref": "#/definitions/TSReadonlyKeyword"
                },
                {
                    "$ref": "#/definitions/TSRestType"
                },
                {
                    "$ref": "#/definitions/TSStaticKeyword"
                },
                {
                    "$ref": "#/definitions/TSStringKeyword"
                },
                {
                    "$ref": "#/definitions/TSSymbolKeyword"
                },
                {
                    "$ref": "#/definitions/TSTemplateLiteralType"
                },
                {
                    "$ref": "#/definitions/TSThisType"
                },
                {
                    "$ref": "#/definitions/TSTupleType"
                },
                {
                    "$ref": "#/definitions/TSTypeLiteral"
                },
                {
                    "$ref": "#/definitions/TSTypeOperator"
                },
                {
                    "$ref": "#/definitions/TSTypePredicate"
                },
                {
                    "$ref": "#/definitions/TSTypeQuery"
                },
                {
                    "$ref": "#/definitions/TSTypeReference"
                },
                {
                    "$ref": "#/definitions/TSUndefinedKeyword"
                },
                {
                    "$ref": "#/definitions/TSUnionType"
                },
                {
                    "$ref": "#/definitions/TSUnknownKeyword"
                },
                {
                    "$ref": "#/definitions/TSVoidKeyword"
                }
            ]
        },
        "UnaryExpression": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "enum": [
                        "!",
                        "+",
                        "-",
                        "delete",
                        "typeof",
                        "void",
                        "~"
                    ],
                    "type": "string"
                },
                "prefix": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "UnaryExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateExpression": {
            "properties": {
                "argument": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "operator": {
                    "enum": [
                        "++",
                        "--"
                    ],
                    "type": "string"
                },
                "prefix": {
                    "type": "boolean"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "UpdateExpression",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UsingInForOfDeclaration": {
            "properties": {
                "declarations": {
                    "description": "The variables declared by this declaration.\nNote that there may be 0 declarations (i.e. `const;`).\n```\nfor(using x of y){}\n```",
                    "items": {
                        "$ref": "#/definitions/UsingInForOfDeclarator"
                    },
                    "type": "array"
                },
                "declare": {
                    "const": false,
                    "description": "This value will always be `false`\nbecause 'declare' modifier cannot appear on a 'using' declaration.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "The keyword used to declare the variable(s)\n```\nfor(using x of y){}\nfor(await using x of y){}\n```",
                    "enum": [
                        "await using",
                        "using"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UsingInForOfDeclarator": {
            "properties": {
                "definite": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier"
                },
                "init": {
                    "type": "null"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclarator",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UsingInNomalConextDeclarator": {
            "properties": {
                "definite": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/Identifier"
                },
                "init": {
                    "$ref": "#/definitions/Expression"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclarator",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UsingInNormalContextDeclaration": {
            "properties": {
                "declarations": {
                    "description": "The variables declared by this declaration.\nNote that there may be 0 declarations (i.e. `const;`).\n```\nusing x = 1;\nusing y =1, z = 2;\n```",
                    "items": {
                        "$ref": "#/definitions/UsingInNomalConextDeclarator"
                    },
                    "type": "array"
                },
                "declare": {
                    "const": false,
                    "description": "This value will always be `false`\nbecause 'declare' modifier cannot appear on a 'using' declaration.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "The keyword used to declare the variable(s)\n```\nusing x = 1;\nawait using y = 2;\n```",
                    "enum": [
                        "await using",
                        "using"
                    ],
                    "type": "string"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "VariableDeclaration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ValueOf": {
            "enum": [
                "%=",
                "&&=",
                "&=",
                "**=",
                "*=",
                "+=",
                "-=",
                "/=",
                "<<=",
                "=",
                ">>=",
                ">>>=",
                "??=",
                "^=",
                "|=",
                "||="
            ],
            "type": "string"
        },
        "ValueOf_1": {
            "enum": [
                "!=",
                "!==",
                "%",
                "&",
                "&&",
                "*",
                "**",
                "+",
                "-",
                "/",
                "<",
                "<<",
                "<=",
                "==",
                "===",
                ">",
                ">=",
                ">>",
                ">>>",
                "^",
                "in",
                "instanceof",
                "|",
                "||"
            ],
            "type": "string"
        },
        "WhileStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "test": {
                    "$ref": "#/definitions/Expression"
                },
                "type": {
                    "const": "WhileStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "WithStatement": {
            "properties": {
                "body": {
                    "$ref": "#/definitions/Statement"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "object": {
                    "$ref": "#/definitions/Expression"
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "WithStatement",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YieldExpression": {
            "properties": {
                "argument": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ArrayExpression"
                        },
                        {
                            "$ref": "#/definitions/ArrayPattern"
                        },
                        {
                            "$ref": "#/definitions/ArrowFunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/AssignmentExpression"
                        },
                        {
                            "$ref": "#/definitions/AwaitExpression"
                        },
                        {
                            "$ref": "#/definitions/BigIntLiteral"
                        },
                        {
                            "$ref": "#/definitions/BinaryExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectPattern"
                        },
                        {
                            "$ref": "#/definitions/Identifier"
                        },
                        {
                            "$ref": "#/definitions/BooleanLiteral"
                        },
                        {
                            "$ref": "#/definitions/CallExpression"
                        },
                        {
                            "$ref": "#/definitions/ChainExpression"
                        },
                        {
                            "$ref": "#/definitions/ClassExpression"
                        },
                        {
                            "$ref": "#/definitions/ConditionalExpression"
                        },
                        {
                            "$ref": "#/definitions/FunctionExpression"
                        },
                        {
                            "$ref": "#/definitions/ImportExpression"
                        },
                        {
                            "$ref": "#/definitions/JSXElement"
                        },
                        {
                            "$ref": "#/definitions/JSXFragment"
                        },
                        {
                            "$ref": "#/definitions/NullLiteral"
                        },
                        {
                            "$ref": "#/definitions/NumberLiteral"
                        },
                        {
                            "$ref": "#/definitions/RegExpLiteral"
                        },
                        {
                            "$ref": "#/definitions/StringLiteral"
                        },
                        {
                            "$ref": "#/definitions/TemplateLiteral"
                        },
                        {
                            "$ref": "#/definitions/LogicalExpression"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionComputedName"
                        },
                        {
                            "$ref": "#/definitions/MemberExpressionNonComputedName"
                        },
                        {
                            "$ref": "#/definitions/MetaProperty"
                        },
                        {
                            "$ref": "#/definitions/NewExpression"
                        },
                        {
                            "$ref": "#/definitions/ObjectExpression"
                        },
                        {
                            "$ref": "#/definitions/SequenceExpression"
                        },
                        {
                            "$ref": "#/definitions/Super"
                        },
                        {
                            "$ref": "#/definitions/TaggedTemplateExpression"
                        },
                        {
                            "$ref": "#/definitions/ThisExpression"
                        },
                        {
                            "$ref": "#/definitions/TSAsExpression"
                        },
                        {
                            "$ref": "#/definitions/TSInstantiationExpression"
                        },
                        {
                            "$ref": "#/definitions/TSNonNullExpression"
                        },
                        {
                            "$ref": "#/definitions/TSSatisfiesExpression"
                        },
                        {
                            "$ref": "#/definitions/TSTypeAssertion"
                        },
                        {
                            "$ref": "#/definitions/UnaryExpression"
                        },
                        {
                            "$ref": "#/definitions/UpdateExpression"
                        },
                        {
                            "$ref": "#/definitions/YieldExpression"
                        }
                    ]
                },
                "delegate": {
                    "type": "boolean"
                },
                "loc": {
                    "$ref": "#/definitions/SourceLocation",
                    "description": "The source location information of the node.\n\nThe loc property is defined as nullable by ESTree, but ESLint requires this property."
                },
                "range": {
                    "description": "An array of two numbers.\nBoth numbers are a 0-based index which is the position in the array of source code characters.\nThe first is the start position of the node, the second is the end position of the node.",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "type": {
                    "const": "YieldExpression",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "client": {
            "$ref": "#/definitions/Client"
        },
        "operationGroups": {
            "additionalProperties": {
                "$ref": "#/definitions/OperationGroup"
            },
            "type": "object"
        },
        "operations": {
            "additionalProperties": {
                "$ref": "#/definitions/Operation"
            },
            "type": "object"
        }
    },
    "type": "object"
}

